import{_ as n,c as s,o as a,a as p}from"./app.a9fa48d4.js";const f='{"title":"Options.props","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6E90\u7801","slug":"\u6E90\u7801"}],"relativePath":"Vue/Options.props/index.md","lastUpdated":1640170533405}',t={},o=p(`<h1 id="options-props" tabindex="-1">Options.props <a class="header-anchor" href="#options-props" aria-hidden="true">#</a></h1><p>vue-next</p><h2 id="\u6E90\u7801" tabindex="-1">\u6E90\u7801 <a class="header-anchor" href="#\u6E90\u7801" aria-hidden="true">#</a></h2><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">assertType</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> type<span class="token operator">:</span> PropConstructor<span class="token punctuation">)</span><span class="token operator">:</span> AssertionResult <span class="token punctuation">{</span>
  <span class="token keyword">let</span> valid<span class="token punctuation">;</span>
  <span class="token comment">// type -&gt; \u6784\u9020\u51FD\u6570</span>
  <span class="token keyword">const</span> expectedType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;expectedType&quot;</span><span class="token punctuation">,</span> expectedType<span class="token punctuation">,</span> <span class="token function">isSimpleType</span><span class="token punctuation">(</span>expectedType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// expectedType -&gt; \u6784\u9020\u51FD\u6570\u7684\u540D\u79F0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSimpleType</span><span class="token punctuation">(</span>expectedType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span> value<span class="token punctuation">;</span>
    valid <span class="token operator">=</span> t <span class="token operator">===</span> expectedType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid <span class="token operator">&amp;&amp;</span> t <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      valid <span class="token operator">=</span> value <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token keyword">type</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedType <span class="token operator">===</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    valid <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedType <span class="token operator">===</span> <span class="token string">&quot;Array&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    valid <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedType <span class="token operator">===</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    valid <span class="token operator">=</span> value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    valid <span class="token operator">=</span> value <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token keyword">type</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    valid<span class="token punctuation">,</span>
    expectedType<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-typescript"><pre><code><span class="token function">assertType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>value</code> \u4E3A\u503C\uFF0C<code>type</code> \u4E3A\u7C7B\u578B\uFF08<code>String</code>, <code>Array</code>, <code>Object</code>\uFF09</p><p><code>expectedType</code> \u83B7\u53D6\u7684\u662F\u901A\u8FC7\u6B63\u5219\u5BF9 <code>Array() { [native code] }</code> \u6240\u622A\u53D6\u7684 <code>Array</code> \u90E8\u5206</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>ctor<span class="token operator">:</span> Prop<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> match <span class="token operator">=</span> ctor <span class="token operator">&amp;&amp;</span> ctor<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*function (\\w+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> match <span class="token operator">?</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> ctor <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;null&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6211\u8BA4\u4E3A\u5728\u8FD9\u91CC\u4E0D\u9002\u7528 instanceof \u6216\u8005\u662F typeof \u7684\u539F\u56E0\u662F\uFF0C\u4FE9\u8005\u90FD\u4E0D\u80FD\u5B8C\u5168\u53BB\u5224\u65AD\uFF0C\u4E14\u652F\u6301\u989D\u5916\u7684\u5176\u4ED6\u7C7B\u578B\uFF0C\u6240\u4EE5\u4F7F\u7528\u6B63\u5219</p>`,9),e=[o];function c(l,u,k,i,r,d){return a(),s("div",null,e)}var g=n(t,[["render",c]]);export{f as __pageData,g as default};
